services:
  client-react-nginx:
    # for shipyard
    labels:
      shipyard.primary-route: true
      shipyard.route: '/'
    image: client-react-nginx
    build:
      context: ./client-react
      dockerfile: Dockerfile.5
    init: true
    networks:
      - frontend
    ports:
      - "80:8080"
    restart: unless-stopped

  api-node:
    # for shipyard
    labels:
      shipyard.route: '/api/node/'
      shipyard.route.rewrite: true
    image: api-node
    build:
      context: ./api-node
      dockerfile: Dockerfile.9
      target: dev
    init: true
    volumes:
      - ./api-node:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:foobarbaz@db:5432/postgres
    networks:
      - frontend
      - backend
    ports:
      - "3000:3000"
    restart: unless-stopped

  api-golang:
    # for shipyard
    labels:
      shipyard.route: '/api/golang/'
      shipyard.route.rewrite: true
    image: api-golang
    build:
      context: ./api-golang
      dockerfile: Dockerfile.8
      target: dev
    init: true
    volumes:
      - ./api-golang:/app
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:foobarbaz@db:5432/postgres
    networks:
      - frontend
      - backend
    ports:
      - "8080:8080"
    restart: unless-stopped

  db:
    image: postgres:15.1-alpine
    environment:
      POSTGRES_PASSWORD: foobarbaz
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "5432:5432"

volumes:
  pgdata:
  node_modules:

networks:
  frontend:
  backend:
